# -*- coding:UTF-8 -*-
#!/usr/bin/python

"""
Custom topology for Mininet, generated by GraphML-Topo-to-Mininet-Network-Generator.
"""
from mininet.topo import Topo
from mininet.net import Mininet
from mininet.node import RemoteController
from mininet.node import Node
from mininet.node import CPULimitedHost
from mininet.link import TCLink
from mininet.cli import CLI
from mininet.log import setLogLevel
from mininet.util import dumpNodeConnections
from time import sleep
from mininet.util import quietRun
from mininet.log import setLogLevel,info
import random
import sys
import time
import os
from threading import Thread
import multiprocessing
from scapy.all import *
##Build Your Topo
class GeneratedTopo(Topo):
    "Internet Topology Zoo Specimen."

    def __init__(self, **opts):
        "Create a topology."

        # Initialize Topology
        Topo.__init__(self, **opts)

        # add nodes, switches first...
        bA237 = self.addSwitch( 's75',failMode='standalone',stp=True)
        bA389 = self.addSwitch( 's2',failMode='standalone',stp=True)
        bJ543 = self.addSwitch( 's7',failMode='standalone',stp=True)
        bJ544 = self.addSwitch( 's11',failMode='standalone',stp=True)
        bX136 = self.addSwitch( 's74',failMode='standalone',stp=True)
        bA228 = self.addSwitch( 's50',failMode='standalone',stp=True)
        bA556 = self.addSwitch( 's67',failMode='standalone',stp=True)
        bA164 = self.addSwitch( 's66',failMode='standalone',stp=True)
        ba537 = self.addSwitch( 's26',failMode='standalone',stp=True)
        bA318 = self.addSwitch( 's34',failMode='standalone',stp=True)
        bA208 = self.addSwitch( 's54',failMode='standalone',stp=True)
        bA388 = self.addSwitch( 's31',failMode='standalone',stp=True)
        bA404 = self.addSwitch( 's63',failMode='standalone',stp=True)
        bA405 = self.addSwitch( 's78',failMode='standalone',stp=True)
        bo525 = self.addSwitch( 's62',failMode='standalone',stp=True)
        ba538 = self.addSwitch( 's29',failMode='standalone',stp=True)
        bA363 = self.addSwitch( 's35',failMode='standalone',stp=True)
        bA403 = self.addSwitch( 's46',failMode='standalone',stp=True)
        bA365 = self.addSwitch( 's45',failMode='standalone',stp=True)
        bA496 = self.addSwitch( 's18',failMode='standalone',stp=True)
        bA495 = self.addSwitch( 's24',failMode='standalone',stp=True)
        bA104 = self.addSwitch( 's32',failMode='standalone',stp=True)
        bX189 = self.addSwitch( 's49',failMode='standalone',stp=True)
        bA212 = self.addSwitch( 's60',failMode='standalone',stp=True)
        bA431 = self.addSwitch( 's6',failMode='standalone',stp=True)
        bA430 = self.addSwitch( 's5',failMode='standalone',stp=True)
        bX137 = self.addSwitch( 's51',failMode='standalone',stp=True)
        bA471 = self.addSwitch( 's0',failMode='standalone',stp=True)
        bA193 = self.addSwitch( 's17',failMode='standalone',stp=True)
        bA472 = self.addSwitch( 's3',failMode='standalone',stp=True)
        bA364 = self.addSwitch( 's36',failMode='standalone',stp=True)
        bL315 = self.addSwitch( 's16',failMode='standalone',stp=True)
        bA555 = self.addSwitch( 's27',failMode='standalone',stp=True)
        bJ261 = self.addSwitch( 's55',failMode='standalone',stp=True)
        bJ245 = self.addSwitch( 's20',failMode='standalone',stp=True)
        bJ244 = self.addSwitch( 's14',failMode='standalone',stp=True)
        bA459 = self.addSwitch( 's69',failMode='standalone',stp=True)
        bL310 = self.addSwitch( 's43',failMode='standalone',stp=True)
        bL155 = self.addSwitch( 's42',failMode='standalone',stp=True)
        bL156 = self.addSwitch( 's48',failMode='standalone',stp=True)
        bA229 = self.addSwitch( 's73',failMode='standalone',stp=True)
        bX190 = self.addSwitch( 's52',failMode='standalone',stp=True)
        bJ552 = self.addSwitch( 's12',failMode='standalone',stp=True)
        bA231 = self.addSwitch( 's77',failMode='standalone',stp=True)
        bA230 = self.addSwitch( 's76',failMode='standalone',stp=True)
        bA127 = self.addSwitch( 's9',failMode='standalone',stp=True)
        bA126 = self.addSwitch( 's19',failMode='standalone',stp=True)
        bY293 = self.addSwitch( 's8',failMode='standalone',stp=True)
        bt185 = self.addSwitch( 's38',failMode='standalone',stp=True)
        bY294 = self.addSwitch( 's10',failMode='standalone',stp=True)
        bA336 = self.addSwitch( 's33',failMode='standalone',stp=True)
        bA443 = self.addSwitch( 's47',failMode='standalone',stp=True)
        bA444 = self.addSwitch( 's1',failMode='standalone',stp=True)
        bA206 = self.addSwitch( 's68',failMode='standalone',stp=True)
        bA163 = self.addSwitch( 's61',failMode='standalone',stp=True)
        bA213 = self.addSwitch( 's65',failMode='standalone',stp=True)
        bA317 = self.addSwitch( 's30',failMode='standalone',stp=True)
        bA569 = self.addSwitch( 's59',failMode='standalone',stp=True)
        bA568 = self.addSwitch( 's57',failMode='standalone',stp=True)
        bo526 = self.addSwitch( 's64',failMode='standalone',stp=True)
        bL285 = self.addSwitch( 's71',failMode='standalone',stp=True)
        bL286 = self.addSwitch( 's72',failMode='standalone',stp=True)
        bn276 = self.addSwitch( 's23',failMode='standalone',stp=True)
        bn277 = self.addSwitch( 's58',failMode='standalone',stp=True)
        bn274 = self.addSwitch( 's21',failMode='standalone',stp=True)
        bn275 = self.addSwitch( 's22',failMode='standalone',stp=True)
        bA509 = self.addSwitch( 's40',failMode='standalone',stp=True)
        bA508 = self.addSwitch( 's39',failMode='standalone',stp=True)
        bA429 = self.addSwitch( 's41',failMode='standalone',stp=True)
        bL300 = self.addSwitch( 's13',failMode='standalone',stp=True)
        bL301 = self.addSwitch( 's4',failMode='standalone',stp=True)
        bA133 = self.addSwitch( 's70',failMode='standalone',stp=True)
        bt184 = self.addSwitch( 's56',failMode='standalone',stp=True)
        bL307 = self.addSwitch( 's15',failMode='standalone',stp=True)
        bL308 = self.addSwitch( 's25',failMode='standalone',stp=True)
        bL309 = self.addSwitch( 's28',failMode='standalone',stp=True)
        bX191 = self.addSwitch( 's53',failMode='standalone',stp=True)
        bA460 = self.addSwitch( 's44',failMode='standalone',stp=True)
        bm119 = self.addSwitch( 's37',failMode='standalone',stp=True)



        bA237_host = self.addHost( 'h75',ip='192.168.123.76')
        bA389_host = self.addHost( 'h2',ip='192.168.123.3')
        bJ543_host = self.addHost( 'h7',ip='192.168.123.8')
        bJ544_host = self.addHost( 'h11',ip='192.168.123.12')
        bX136_host = self.addHost( 'h74',ip='192.168.123.75')
        bA228_host = self.addHost( 'h50',ip='192.168.123.51')
        bA556_host = self.addHost( 'h67',ip='192.168.123.68')
        bA164_host = self.addHost( 'h66',ip='192.168.123.67')
        ba537_host = self.addHost( 'h26',ip='192.168.123.27')
        bA318_host = self.addHost( 'h34',ip='192.168.123.35')
        bA208_host = self.addHost( 'h54',ip='192.168.123.55')
        bA388_host = self.addHost( 'h31',ip='192.168.123.32')
        bA404_host = self.addHost( 'h63',ip='192.168.123.64')
        bA405_host = self.addHost( 'h78',ip='192.168.123.79')
        bo525_host = self.addHost( 'h62',ip='192.168.123.63')
        ba538_host = self.addHost( 'h29',ip='192.168.123.30')
        bA363_host = self.addHost( 'h35',ip='192.168.123.36')
        bA403_host = self.addHost( 'h46',ip='192.168.123.47')
        bA365_host = self.addHost( 'h45',ip='192.168.123.46')
        bA496_host = self.addHost( 'h18',ip='192.168.123.19')
        bA495_host = self.addHost( 'h24',ip='192.168.123.25')
        bA104_host = self.addHost( 'h32',ip='192.168.123.33')
        bX189_host = self.addHost( 'h49',ip='192.168.123.50')
        bA212_host = self.addHost( 'h60',ip='192.168.123.61')
        bA431_host = self.addHost( 'h6',ip='192.168.123.7')
        bA430_host = self.addHost( 'h5',ip='192.168.123.6')
        bX137_host = self.addHost( 'h51',ip='192.168.123.52')
        bA471_host = self.addHost( 'h0',ip='192.168.123.1')
        bA193_host = self.addHost( 'h17',ip='192.168.123.18')
        bA472_host = self.addHost( 'h3',ip='192.168.123.4')
        bA364_host = self.addHost( 'h36',ip='192.168.123.37')
        bL315_host = self.addHost( 'h16',ip='192.168.123.17')
        bA555_host = self.addHost( 'h27',ip='192.168.123.28')
        bJ261_host = self.addHost( 'h55',ip='192.168.123.56')
        bJ245_host = self.addHost( 'h20',ip='192.168.123.21')
        bJ244_host = self.addHost( 'h14',ip='192.168.123.15')
        bA459_host = self.addHost( 'h69',ip='192.168.123.70')
        bL310_host = self.addHost( 'h43',ip='192.168.123.44')
        bL155_host = self.addHost( 'h42',ip='192.168.123.43')
        bL156_host = self.addHost( 'h48',ip='192.168.123.49')
        bA229_host = self.addHost( 'h73',ip='192.168.123.74')
        bX190_host = self.addHost( 'h52',ip='192.168.123.53')
        bJ552_host = self.addHost( 'h12',ip='192.168.123.13')
        bA231_host = self.addHost( 'h77',ip='192.168.123.78')
        bA230_host = self.addHost( 'h76',ip='192.168.123.77')
        bA127_host = self.addHost( 'h9',ip='192.168.123.10')
        bA126_host = self.addHost( 'h19',ip='192.168.123.20')
        bY293_host = self.addHost( 'h8',ip='192.168.123.9')
        bt185_host = self.addHost( 'h38',ip='192.168.123.39')
        bY294_host = self.addHost( 'h10',ip='192.168.123.11')
        bA336_host = self.addHost( 'h33',ip='192.168.123.34')
        bA443_host = self.addHost( 'h47',ip='192.168.123.48')
        bA444_host = self.addHost( 'h1',ip='192.168.123.2')
        bA206_host = self.addHost( 'h68',ip='192.168.123.69')
        bA163_host = self.addHost( 'h61',ip='192.168.123.62')
        bA213_host = self.addHost( 'h65',ip='192.168.123.66')
        bA317_host = self.addHost( 'h30',ip='192.168.123.31')
        bA569_host = self.addHost( 'h59',ip='192.168.123.60')
        bA568_host = self.addHost( 'h57',ip='192.168.123.58')
        bo526_host = self.addHost( 'h64',ip='192.168.123.65')
        bL285_host = self.addHost( 'h71',ip='192.168.123.72')
        bL286_host = self.addHost( 'h72',ip='192.168.123.73')
        bn276_host = self.addHost( 'h23',ip='192.168.123.24')
        bn277_host = self.addHost( 'h58',ip='192.168.123.59')
        bn274_host = self.addHost( 'h21',ip='192.168.123.22')
        bn275_host = self.addHost( 'h22',ip='192.168.123.23')
        bA509_host = self.addHost( 'h40',ip='192.168.123.41')
        bA508_host = self.addHost( 'h39',ip='192.168.123.40')
        bA429_host = self.addHost( 'h41',ip='192.168.123.42')
        bL300_host = self.addHost( 'h13',ip='192.168.123.14')
        bL301_host = self.addHost( 'h4',ip='192.168.123.5')
        bA133_host = self.addHost( 'h70',ip='192.168.123.71')
        bt184_host = self.addHost( 'h56',ip='192.168.123.57')
        bL307_host = self.addHost( 'h15',ip='192.168.123.16')
        bL308_host = self.addHost( 'h25',ip='192.168.123.26')
        bL309_host = self.addHost( 'h28',ip='192.168.123.29')
        bX191_host = self.addHost( 'h53',ip='192.168.123.54')
        bA460_host = self.addHost( 'h44',ip='192.168.123.45')
        bm119_host = self.addHost( 'h37',ip='192.168.123.38')



        self.addLink( bA237 , bA237_host )
        self.addLink( bA389 , bA389_host )
        self.addLink( bJ543 , bJ543_host )
        self.addLink( bJ544 , bJ544_host )
        self.addLink( bX136 , bX136_host )
        self.addLink( bA228 , bA228_host )
        self.addLink( bA556 , bA556_host )
        self.addLink( bA164 , bA164_host )
        self.addLink( ba537 , ba537_host )
        self.addLink( bA318 , bA318_host )
        self.addLink( bA208 , bA208_host )
        self.addLink( bA388 , bA388_host )
        self.addLink( bA404 , bA404_host )
        self.addLink( bA405 , bA405_host )
        self.addLink( bo525 , bo525_host )
        self.addLink( ba538 , ba538_host )
        self.addLink( bA363 , bA363_host )
        self.addLink( bA403 , bA403_host )
        self.addLink( bA365 , bA365_host )
        self.addLink( bA496 , bA496_host )
        self.addLink( bA495 , bA495_host )
        self.addLink( bA104 , bA104_host )
        self.addLink( bX189 , bX189_host )
        self.addLink( bA212 , bA212_host )
        self.addLink( bA431 , bA431_host )
        self.addLink( bA430 , bA430_host )
        self.addLink( bX137 , bX137_host )
        self.addLink( bA471 , bA471_host )
        self.addLink( bA193 , bA193_host )
        self.addLink( bA472 , bA472_host )
        self.addLink( bA364 , bA364_host )
        self.addLink( bL315 , bL315_host )
        self.addLink( bA555 , bA555_host )
        self.addLink( bJ261 , bJ261_host )
        self.addLink( bJ245 , bJ245_host )
        self.addLink( bJ244 , bJ244_host )
        self.addLink( bA459 , bA459_host )
        self.addLink( bL310 , bL310_host )
        self.addLink( bL155 , bL155_host )
        self.addLink( bL156 , bL156_host )
        self.addLink( bA229 , bA229_host )
        self.addLink( bX190 , bX190_host )
        self.addLink( bJ552 , bJ552_host )
        self.addLink( bA231 , bA231_host )
        self.addLink( bA230 , bA230_host )
        self.addLink( bA127 , bA127_host )
        self.addLink( bA126 , bA126_host )
        self.addLink( bY293 , bY293_host )
        self.addLink( bt185 , bt185_host )
        self.addLink( bY294 , bY294_host )
        self.addLink( bA336 , bA336_host )
        self.addLink( bA443 , bA443_host )
        self.addLink( bA444 , bA444_host )
        self.addLink( bA206 , bA206_host )
        self.addLink( bA163 , bA163_host )
        self.addLink( bA213 , bA213_host )
        self.addLink( bA317 , bA317_host )
        self.addLink( bA569 , bA569_host )
        self.addLink( bA568 , bA568_host )
        self.addLink( bo526 , bo526_host )
        self.addLink( bL285 , bL285_host )
        self.addLink( bL286 , bL286_host )
        self.addLink( bn276 , bn276_host )
        self.addLink( bn277 , bn277_host )
        self.addLink( bn274 , bn274_host )
        self.addLink( bn275 , bn275_host )
        self.addLink( bA509 , bA509_host )
        self.addLink( bA508 , bA508_host )
        self.addLink( bA429 , bA429_host )
        self.addLink( bL300 , bL300_host )
        self.addLink( bL301 , bL301_host )
        self.addLink( bA133 , bA133_host )
        self.addLink( bt184 , bt184_host )
        self.addLink( bL307 , bL307_host )
        self.addLink( bL308 , bL308_host )
        self.addLink( bL309 , bL309_host )
        self.addLink( bX191 , bX191_host )
        self.addLink( bA460 , bA460_host )
        self.addLink( bm119 , bm119_host )



        self.addLink( bJ261 , bJ244, bw=100, delay='1ms')
        self.addLink( bA404 , bo525, bw=100, delay='43ms')
        self.addLink( bA229 , bA228, bw=100, delay='1ms')
        self.addLink( bL300 , bL310, bw=100, delay='1ms')
        self.addLink( bA364 , bA431, bw=100, delay='1ms')
        self.addLink( bo526 , bA336, bw=100, delay='43ms')
        self.addLink( bA429 , bA508, bw=100, delay='7ms')
        self.addLink( bL156 , bL155, bw=100, delay='1ms')
        self.addLink( bA556 , bL300, bw=100, delay='8ms')
        self.addLink( bA443 , bA389, bw=100, delay='1ms')
        self.addLink( bA231 , bA228, bw=100, delay='1ms')
        self.addLink( bL300 , bA555, bw=100, delay='8ms')
        self.addLink( bA364 , bA430, bw=100, delay='1ms')
        self.addLink( bJ552 , bL300, bw=100, delay='7ms')
        self.addLink( bA231 , bA164, bw=100, delay='2ms')
        self.addLink( bA569 , bA568, bw=100, delay='1ms')
        self.addLink( bA443 , bA430, bw=100, delay='1ms')
        self.addLink( bJ543 , bJ244, bw=100, delay='2ms')
        self.addLink( bX190 , bA229, bw=100, delay='11ms')
        self.addLink( bX190 , bA228, bw=100, delay='11ms')
        self.addLink( bA430 , bA472, bw=100, delay='2ms')
        self.addLink( bL300 , bL315, bw=100, delay='1ms')
        self.addLink( bA430 , bA364, bw=100, delay='1ms')
        self.addLink( bA431 , bA443, bw=100, delay='1ms')
        self.addLink( bA228 , bX190, bw=100, delay='11ms')
        self.addLink( bJ245 , bn276, bw=100, delay='29ms')
        self.addLink( bJ245 , bn274, bw=100, delay='29ms')
        self.addLink( bA318 , bA364, bw=100, delay='2ms')
        self.addLink( bA318 , bA363, bw=100, delay='2ms')
        self.addLink( bA403 , bA164, bw=100, delay='4ms')
        self.addLink( bA388 , bA317, bw=100, delay='2ms')
        self.addLink( bA556 , bA555, bw=100, delay='1ms')
        self.addLink( bA388 , bA460, bw=100, delay='2ms')
        self.addLink( bA569 , bA556, bw=100, delay='1ms')
        self.addLink( bL156 , bL300, bw=100, delay='2ms')
        self.addLink( bJ244 , bA568, bw=100, delay='3ms')
        self.addLink( bJ244 , bA569, bw=100, delay='3ms')
        self.addLink( bA127 , bA133, bw=100, delay='1ms')
        self.addLink( bL301 , bL309, bw=100, delay='1ms')
        self.addLink( bL301 , bL308, bw=100, delay='1ms')
        self.addLink( bA404 , bA163, bw=100, delay='4ms')
        self.addLink( bA444 , bA471, bw=100, delay='2ms')
        self.addLink( bA405 , bA163, bw=100, delay='4ms')
        self.addLink( bn274 , bJ544, bw=100, delay='29ms')
        self.addLink( bA228 , bA229, bw=100, delay='1ms')
        self.addLink( bA443 , bA444, bw=100, delay='1ms')
        self.addLink( bA429 , bA430, bw=100, delay='1ms')
        self.addLink( bA429 , bA431, bw=100, delay='1ms')
        self.addLink( bA208 , bA206, bw=100, delay='1ms')
        self.addLink( bL300 , bL301, bw=100, delay='1ms')
        self.addLink( bA555 , bA556, bw=100, delay='1ms')
        self.addLink( bA317 , bA104, bw=100, delay='1ms')
        self.addLink( bJ543 , bA127, bw=100, delay='7ms')
        self.addLink( bA389 , bA443, bw=100, delay='1ms')
        self.addLink( bA459 , bA460, bw=100, delay='1ms')
        self.addLink( bJ245 , bJ244, bw=100, delay='1ms')
        self.addLink( bA164 , bA443, bw=100, delay='4ms')
        self.addLink( bA431 , bA429, bw=100, delay='1ms')
        self.addLink( ba537 , bA555, bw=100, delay='2ms')
        self.addLink( bL300 , bL308, bw=100, delay='1ms')
        self.addLink( bX137 , bX189, bw=100, delay='3ms')
        self.addLink( bA388 , bA389, bw=100, delay='1ms')
        self.addLink( bA556 , bA569, bw=100, delay='1ms')
        self.addLink( bA471 , bL301, bw=100, delay='16ms')
        self.addLink( bL286 , bL285, bw=100, delay='1ms')
        self.addLink( bA163 , bA404, bw=100, delay='4ms')
        self.addLink( bA508 , bL155, bw=100, delay='15ms')
        self.addLink( bJ544 , bY293, bw=100, delay='2ms')
        self.addLink( bA228 , bX189, bw=100, delay='11ms')
        self.addLink( bA127 , bL286, bw=100, delay='6ms')
        self.addLink( bY293 , bJ544, bw=100, delay='2ms')
        self.addLink( bA127 , bJ543, bw=100, delay='7ms')
        self.addLink( bL301 , bL315, bw=100, delay='1ms')
        self.addLink( bY293 , bJ543, bw=100, delay='2ms')
        self.addLink( bA363 , bA431, bw=100, delay='1ms')
        self.addLink( bJ544 , bn274, bw=100, delay='29ms')
        self.addLink( bJ544 , bn275, bw=100, delay='29ms')
        self.addLink( bJ544 , bn276, bw=100, delay='29ms')
        self.addLink( bA403 , bA429, bw=100, delay='1ms')
        self.addLink( bA163 , bA405, bw=100, delay='4ms')
        self.addLink( bL300 , bA556, bw=100, delay='8ms')
        self.addLink( bA495 , bA208, bw=100, delay='1ms')
        self.addLink( bA472 , bA389, bw=100, delay='2ms')
        self.addLink( bL309 , bL301, bw=100, delay='1ms')
        self.addLink( bL309 , bL300, bw=100, delay='1ms')
        self.addLink( bA443 , bA431, bw=100, delay='1ms')
        self.addLink( bY294 , bY293, bw=100, delay='1ms')
        self.addLink( bA429 , bA403, bw=100, delay='1ms')
        self.addLink( bA431 , bA472, bw=100, delay='2ms')
        self.addLink( bn275 , bJ245, bw=100, delay='29ms')
        self.addLink( bA389 , bA471, bw=100, delay='2ms')
        self.addLink( bA389 , bA472, bw=100, delay='2ms')
        self.addLink( bJ552 , bJ543, bw=100, delay='1ms')
        self.addLink( bA403 , bA104, bw=100, delay='2ms')
        self.addLink( bL301 , bL155, bw=100, delay='2ms')
        self.addLink( bL155 , bA509, bw=100, delay='15ms')
        self.addLink( bL155 , bA508, bw=100, delay='15ms')
        self.addLink( bA471 , bA389, bw=100, delay='2ms')
        self.addLink( bL301 , bL310, bw=100, delay='1ms')
        self.addLink( bn276 , bJ245, bw=100, delay='29ms')
        self.addLink( bA163 , bA164, bw=100, delay='1ms')
        self.addLink( bA496 , bA193, bw=100, delay='1ms')
        self.addLink( bJ544 , bA495, bw=100, delay='3ms')
        self.addLink( bA471 , bA472, bw=100, delay='1ms')
        self.addLink( bA365 , bA104, bw=100, delay='2ms')
        self.addLink( bA404 , bA403, bw=100, delay='1ms')
        self.addLink( bJ245 , bJ544, bw=100, delay='2ms')
        self.addLink( bA460 , bA459, bw=100, delay='1ms')
        self.addLink( bA509 , bA508, bw=100, delay='1ms')
        self.addLink( bA568 , bA555, bw=100, delay='1ms')
        self.addLink( bA568 , bA569, bw=100, delay='1ms')
        self.addLink( bA555 , bL300, bw=100, delay='8ms')
        self.addLink( bm119 , bn275, bw=100, delay='3ms')
        self.addLink( bm119 , bn274, bw=100, delay='3ms')
        self.addLink( bA126 , bA133, bw=100, delay='1ms')
        self.addLink( bA126 , bA193, bw=100, delay='6ms')
        self.addLink( bA430 , bA404, bw=100, delay='1ms')
        self.addLink( bA104 , bA403, bw=100, delay='2ms')
        self.addLink( bA508 , bA429, bw=100, delay='7ms')
        self.addLink( bA317 , bA336, bw=100, delay='2ms')
        self.addLink( bA555 , bA568, bw=100, delay='1ms')
        self.addLink( bA228 , bA231, bw=100, delay='1ms')
        self.addLink( bA228 , bA230, bw=100, delay='1ms')
        self.addLink( bA430 , bA429, bw=100, delay='1ms')
        self.addLink( bA212 , bA163, bw=100, delay='2ms')
        self.addLink( bA208 , bA495, bw=100, delay='1ms')
        self.addLink( bA460 , bo526, bw=100, delay='44ms')
        self.addLink( bJ544 , bJ245, bw=100, delay='2ms')
        self.addLink( bA430 , bA388, bw=100, delay='1ms')
        self.addLink( bA472 , bA471, bw=100, delay='1ms')
        self.addLink( bJ244 , bJ543, bw=100, delay='2ms')
        self.addLink( bA508 , bA509, bw=100, delay='1ms')
        self.addLink( bA431 , bA363, bw=100, delay='1ms')
        self.addLink( bA460 , bA388, bw=100, delay='2ms')
        self.addLink( bn274 , bJ245, bw=100, delay='29ms')
        self.addLink( bA213 , bA164, bw=100, delay='2ms')
        self.addLink( bJ244 , bJ245, bw=100, delay='1ms')
        self.addLink( bA443 , bA460, bw=100, delay='2ms')
        self.addLink( bY293 , bA206, bw=100, delay='3ms')
        self.addLink( bA193 , bA496, bw=100, delay='1ms')
        self.addLink( bA127 , bX190, bw=100, delay='8ms')
        self.addLink( bA404 , bA213, bw=100, delay='4ms')
        self.addLink( bX190 , bX136, bw=100, delay='3ms')
        self.addLink( bo526 , bA460, bw=100, delay='44ms')
        self.addLink( bX137 , bA163, bw=100, delay='11ms')
        self.addLink( bA403 , bA444, bw=100, delay='1ms')
        self.addLink( bL308 , bL315, bw=100, delay='1ms')
        self.addLink( bn275 , bm119, bw=100, delay='3ms')
        self.addLink( bX191 , bX190, bw=100, delay='1ms')
        self.addLink( bA444 , bA443, bw=100, delay='1ms')
        self.addLink( bL300 , bJ552, bw=100, delay='7ms')
        self.addLink( bJ245 , bJ261, bw=100, delay='1ms')
        self.addLink( bA336 , bo526, bw=100, delay='43ms')
        self.addLink( bA126 , bA127, bw=100, delay='1ms')
        self.addLink( bt185 , bm119, bw=100, delay='3ms')
        self.addLink( bo525 , bA404, bw=100, delay='43ms')
        self.addLink( bA163 , bA212, bw=100, delay='2ms')
        self.addLink( bL315 , bL307, bw=100, delay='1ms')
        self.addLink( bA237 , bA231, bw=100, delay='1ms')
        self.addLink( bA164 , bA163, bw=100, delay='1ms')
        self.addLink( bA403 , bA405, bw=100, delay='1ms')
        self.addLink( bA429 , bA496, bw=100, delay='21ms')
        self.addLink( bA365 , bA431, bw=100, delay='1ms')
        self.addLink( bJ244 , bt184, bw=100, delay='32ms')
        self.addLink( bA104 , bA317, bw=100, delay='1ms')
        self.addLink( bL310 , bL301, bw=100, delay='1ms')
        self.addLink( bL310 , bL300, bw=100, delay='1ms')
        self.addLink( bt184 , bJ244, bw=100, delay='32ms')
        self.addLink( bA231 , bA237, bw=100, delay='1ms')
        self.addLink( bL286 , bA127, bw=100, delay='6ms')
        self.addLink( bA444 , bA404, bw=100, delay='1ms')
        self.addLink( bA459 , bA429, bw=100, delay='2ms')
        self.addLink( bA431 , bA365, bw=100, delay='1ms')
        self.addLink( bA404 , bA443, bw=100, delay='1ms')
        self.addLink( bL301 , bL300, bw=100, delay='1ms')
        self.addLink( bA431 , bA364, bw=100, delay='1ms')
        self.addLink( bL315 , bL308, bw=100, delay='1ms')
        self.addLink( bA404 , bA444, bw=100, delay='1ms')
        self.addLink( bL300 , bJ543, bw=100, delay='7ms')
        self.addLink( bL308 , bL300, bw=100, delay='1ms')
        self.addLink( bL308 , bL301, bw=100, delay='1ms')
        self.addLink( bL315 , bL300, bw=100, delay='1ms')
        self.addLink( bL315 , bL301, bw=100, delay='1ms')
        self.addLink( bL285 , bY293, bw=100, delay='10ms')
        self.addLink( bA336 , bA430, bw=100, delay='1ms')
        self.addLink( bX190 , bX189, bw=100, delay='1ms')
        self.addLink( bL285 , bL286, bw=100, delay='1ms')
        self.addLink( bA403 , bA389, bw=100, delay='1ms')
        self.addLink( bJ245 , bn275, bw=100, delay='29ms')
        self.addLink( bL301 , bA471, bw=100, delay='16ms')
        self.addLink( bX191 , bX189, bw=100, delay='1ms')
        self.addLink( bA104 , bA365, bw=100, delay='2ms')
        self.addLink( bA568 , bJ244, bw=100, delay='3ms')
        self.addLink( bL301 , bL307, bw=100, delay='1ms')
        self.addLink( bA403 , bX189, bw=100, delay='13ms')
        self.addLink( bA495 , bA496, bw=100, delay='1ms')
        self.addLink( bA317 , bA318, bw=100, delay='1ms')
        self.addLink( bA429 , bA459, bw=100, delay='2ms')
        self.addLink( bX189 , bA228, bw=100, delay='11ms')
        self.addLink( bJ543 , bL300, bw=100, delay='7ms')
        self.addLink( bL307 , bL301, bw=100, delay='1ms')
        self.addLink( bL307 , bL300, bw=100, delay='1ms')
        self.addLink( bA164 , bA231, bw=100, delay='2ms')
        self.addLink( bA443 , bA164, bw=100, delay='4ms')
        self.addLink( bL300 , bL156, bw=100, delay='2ms')
        self.addLink( bA430 , bA336, bw=100, delay='1ms')
        self.addLink( bA133 , bA126, bw=100, delay='1ms')
        self.addLink( bA133 , bA127, bw=100, delay='1ms')
        self.addLink( bA127 , bA193, bw=100, delay='6ms')
        self.addLink( bY294 , bJ543, bw=100, delay='2ms')
        self.addLink( bJ544 , bJ552, bw=100, delay='1ms')
        self.addLink( bX189 , bX190, bw=100, delay='1ms')
        self.addLink( bX189 , bX191, bw=100, delay='1ms')
        self.addLink( bA471 , bA444, bw=100, delay='2ms')
        self.addLink( bA404 , bA430, bw=100, delay='1ms')
        self.addLink( bA430 , bA443, bw=100, delay='1ms')
        self.addLink( bA164 , bA213, bw=100, delay='2ms')
        self.addLink( bo526 , bo525, bw=100, delay='1ms')
        self.addLink( bL155 , bL156, bw=100, delay='1ms')
        self.addLink( bn274 , bm119, bw=100, delay='3ms')
        self.addLink( bn277 , bJ244, bw=100, delay='29ms')
        self.addLink( bY293 , bA208, bw=100, delay='3ms')
        self.addLink( bX190 , bX191, bw=100, delay='1ms')
        self.addLink( bA213 , bA404, bw=100, delay='4ms')
        self.addLink( bJ245 , bY294, bw=100, delay='2ms')
        self.addLink( bA127 , bA126, bw=100, delay='1ms')
        self.addLink( bY294 , bJ245, bw=100, delay='2ms')
        self.addLink( bA163 , bX137, bw=100, delay='11ms')
        self.addLink( bA509 , bL155, bw=100, delay='15ms')
        self.addLink( bA569 , bJ244, bw=100, delay='3ms')
        self.addLink( bA228 , bA237, bw=100, delay='1ms')
        self.addLink( bL156 , bX189, bw=100, delay='8ms')
        self.addLink( bJ543 , bJ544, bw=100, delay='1ms')
        self.addLink( bL300 , bL309, bw=100, delay='1ms')
        self.addLink( bJ543 , bY294, bw=100, delay='2ms')
        self.addLink( bL307 , bL315, bw=100, delay='1ms')
        self.addLink( bA317 , bA388, bw=100, delay='2ms')
        self.addLink( bJ543 , bY293, bw=100, delay='2ms')
        self.addLink( bA193 , bA126, bw=100, delay='6ms')
        self.addLink( bA193 , bA127, bw=100, delay='6ms')
        self.addLink( bX190 , bA127, bw=100, delay='8ms')
        self.addLink( bA555 , ba537, bw=100, delay='2ms')
        self.addLink( bn275 , bJ544, bw=100, delay='29ms')
        self.addLink( bY293 , bL285, bw=100, delay='10ms')
        self.addLink( bA229 , bX190, bw=100, delay='11ms')
        self.addLink( bA495 , bJ544, bw=100, delay='3ms')
        self.addLink( bJ544 , bJ543, bw=100, delay='1ms')
        self.addLink( bA206 , bY293, bw=100, delay='3ms')
        self.addLink( bA364 , bA318, bw=100, delay='2ms')
        self.addLink( bJ261 , bJ245, bw=100, delay='1ms')
        self.addLink( bA496 , bA495, bw=100, delay='1ms')
        self.addLink( bA237 , bA228, bw=100, delay='1ms')
        self.addLink( bA389 , bA388, bw=100, delay='1ms')
        self.addLink( bJ244 , bJ261, bw=100, delay='1ms')
        self.addLink( bA336 , bA317, bw=100, delay='2ms')
        self.addLink( bJ552 , bJ544, bw=100, delay='1ms')
        self.addLink( bJ244 , bn277, bw=100, delay='29ms')
        self.addLink( bX189 , bX137, bw=100, delay='3ms')
        self.addLink( bA444 , bA104, bw=100, delay='2ms')
        self.addLink( bA229 , bA164, bw=100, delay='2ms')
        self.addLink( ba538 , bL300, bw=100, delay='8ms')
        self.addLink( bJ543 , bJ552, bw=100, delay='1ms')
        self.addLink( bA104 , bA444, bw=100, delay='2ms')
        self.addLink( bA363 , bA318, bw=100, delay='2ms')
        self.addLink( bX136 , bX190, bw=100, delay='3ms')
        self.addLink( bA230 , bA164, bw=100, delay='2ms')
        self.addLink( bA472 , bA430, bw=100, delay='2ms')
        self.addLink( bA472 , bA431, bw=100, delay='2ms')
        self.addLink( bn276 , bJ544, bw=100, delay='29ms')
        self.addLink( bY293 , bY294, bw=100, delay='1ms')
        self.addLink( bA496 , bA429, bw=100, delay='21ms')
        self.addLink( bA164 , bA229, bw=100, delay='2ms')
        self.addLink( bX189 , bL156, bw=100, delay='8ms')
        self.addLink( bA389 , bA403, bw=100, delay='1ms')
        self.addLink( bA164 , bA403, bw=100, delay='4ms')
        self.addLink( bA213 , bA228, bw=100, delay='1ms')
        self.addLink( bA164 , bA230, bw=100, delay='2ms')
        self.addLink( bA460 , bA443, bw=100, delay='2ms')
        self.addLink( bA208 , bY293, bw=100, delay='3ms')
        self.addLink( bA228 , bA213, bw=100, delay='1ms')
        self.addLink( bo525 , bo526, bw=100, delay='1ms')
        self.addLink( bL155 , bL301, bw=100, delay='2ms')
        self.addLink( bA388 , bA430, bw=100, delay='1ms')
        self.addLink( bA318 , bA317, bw=100, delay='1ms')
        self.addLink( bL300 , ba538, bw=100, delay='8ms')
        self.addLink( bA230 , bA228, bw=100, delay='1ms')
        self.addLink( bL300 , bL307, bw=100, delay='1ms')
        self.addLink( bA403 , bA404, bw=100, delay='1ms')
        self.addLink( bX189 , bA403, bw=100, delay='13ms')
        self.addLink( bA405 , bA403, bw=100, delay='1ms')
        self.addLink( bA444 , bA403, bw=100, delay='1ms')
        self.addLink( bA206 , bA208, bw=100, delay='1ms')
        self.addLink( bm119 , bt185, bw=100, delay='3ms')
        self.addLink( bA443 , bA404, bw=100, delay='1ms')


#worker 程序
def worker(h1,h2):
    h1.cmd('python client.py '+h1.IP()+' '+h2.IP()+' &')
    print('IP is')
    print(h2.IP())

#openserver
def openserver(h1):
    h1.cmd('python server.py '+h1.IP()+' &')
    print("I am open")
    print(h1.IP())

def traffic(net,j):
    list_all=[]
    for i in range(count_node):
        list_all.append(i)
    list1=random.sample(list_all,count_node/2)
    for item in list1:
        if(item in list1):
            list_all.remove(item)
    list2=random.sample(list_all,count_node/2)
    f_throughput=open('throughput.txt','a')
    f_throughput.write(str(i)+'\n')
    


    ##加入进程list
    jobs=[]
    for temp in range(count_node/2):
        str1=list1[temp]
        for temp2 in range(count_node/2):
            str2=list2[temp2]
            h1='h'+str(str1)
            h2='h'+str(str2)
            """
            if(str1==brokennode):
                a=h1
                h1=h2
                h2=a
            print(h1)
            print(h2)
            """
            f_throughput.write(h1+'\t'+h2+'\n')
            node1=net.get(h1)
            node2=net.get(h2)
            print(node1.IP())
            print(node2.IP())
            openserver(node2)
            """
            thread=TrafficThread(node1,node2)
            threads.append(thread)
            thread.start()
            """
            

            p=multiprocessing.Process(target=worker,args=(node1,node2))
            jobs.append(p)
    
        
            f_throughput.write('\n')
    ##jobs shuffle
    jobs=random.sample(jobs,len(jobs))
    ##jobs start
    count=0
    stop=int(len(jobs)*3/4)

    for p in jobs:
        p.start()
        ### close signal
        if(count==stop):
            pingtest(net,count_node)
            singledown(net,0,brokennode)
        count+=1
    sleep(1)
    ##wait for close signal
    for p in jobs:
        print("Try to close subprocess")
        p.terminate()
    start=time.time()
    judge=start
    while True:
        print('Kill me')
        if(judge-start>=0.5):
            f_throughput.close()
            net.stop()
            sys.exit(0)
            break

        judge+=1

def pingtest(net,n):
    h0=net.hosts[0]
    for i in range(1,n):
        h1=net.hosts[i]
        h0.cmdPrint('ping -Q 0x64 -c 1 '+h1.IP())
    print("PING is OK")

def singledown(net,i,brokennode):
    #count=random.randint(0,41)
    #count=5
    count=brokennode
    node1='s'+str(count)
    node1_neighbors=neighbors[node1]
    print(node1)
    f_brokenswitch=open("brokenswitch.txt",'a')
    f_brokenswitch.write(str(i)+'\t'+node1+'\t')
    for node2 in node1_neighbors:
        print(node2)
        f_brokenswitch.write(node2+'\t')
        net.configLinkStatus(node1,node2,'down')
    f_brokenswitch.write('\n')
    #normal(net,i)
    f_brokenswitch.close()
    print('i have closed')
 


def normal(net,j):
    list_all=[]
    for i in range(40):
        list_all.append(i)
    list1=random.sample(list_all,20)
    for item in list1:
        if(item in list1):
            list_all.remove(item)
    list2=random.sample(list_all,20)
    f_throughput=open('throughput.txt','a')
    f_throughput.write(str(i)+'\n')
    for temp in range(20):
        str1=list1[temp]
        for temp2 in range(1):
            str2=list2[temp2]
            h1='h'+str(str1)
            h2='h'+str(str2)
            if(str1==brokennode):
                a=h1
                h1=h2
                h2=a
            print(h1)
            print(h2)
            f_throughput.write(h1+'\t'+h2+'\n')
            node1=net.get(h1)
            node2=net.get(h2)
            print(node1.IP())
            print(node2.IP())
            data=Raw(RandString(size=1600))
            #node1.cmd("iperf "+'-t 10 -c '+node2.IP()+" & ")
            pkt=IP(src=node1.IP(),dst=node2.IP())/TCP(sport=12345,dport=12345)/data
            send(pkt,inter=0.05,count=1)
        f_throughput.write('\n')
    f_throughput.close()


def brokenlink(net,i):
    dic_keys={}
    f_brokenlink=open('brokenlink.txt','a')
    s_w=random.randint(0,1)
    count=random.randint(2,40)
    node1=''
    if(s_w==0):
        node1='s'+str(count)
    if(s_w==1):
        node1='h'+str(count)
    print(type(node1))
    print(node1)
    if(s_w==0):
        node2=random.choice(neighbors[node1])
    if(s_w==1):
        node2='s'+str(count)
    print(type(node2))
    print(node2)
    f_brokenlink.write(str(i)+'\t'+node1+'\t'+node2+'\t'+'\n')
    f_brokenlink.close()
    net.configLinkStatus(node1,node2,'down')
    normal(net,i)
    sleep(1)
    net.configLinkStatus(node1,node2,'up')
    sleep(2)
    """
    for item1 in net.switches:
        node1=item1.name
        for item2 in neighbors[node1]:
            if(item2[0]=='h'):
                continue
            node2=item2
            print(node1)
            print(node2)
            temp1=node1+'\t'+node2
            temp2=node2+'\t'+node1
            if(temp1 in dic_keys):
                continue
            else:
                dic_keys[temp1]=1
                dic_keys[temp2]=1
            f_brokenlink.write(str(count)+'\t'+node1+'\t'+node2+'\t'+'\n')
            f_brokenlink.close()
            net.configLinkStatus(node1,node2,'down')
            net.pingAll()
            sleep(1)
            net.configLinkStatus(node1,node2,'up')
            count+=1
    """
def brokenlink1(net,node1,node2):
    print(node1)
    print(node2)
    f_brokenlink.write(node1+'\t'+node2+'\t'+'\n')
    net.configLinkStatus(node1,node2,'down')
    net.pingAll()
    sleep(1)
    net.configLinkStatus(node1,node2,'up')
def brokenswitch(net,i,brokennode):
    #count=random.randint(0,41)
    #count=5
    count=brokennode
    node1='s'+str(count)
    node1_neighbors=neighbors[node1]
    print(node1)
    f_brokenswitch=open("brokenswitch.txt",'a')
    f_brokenswitch.write(str(i)+'\t'+node1+'\t')
    for node2 in node1_neighbors:
        print(node2)
        f_brokenswitch.write(node2+'\t')
        net.configLinkStatus(node1,node2,'down')
    f_brokenswitch.write('\n')
    normal(net,i)
    f_brokenswitch.close()
    #sleep(1)
    for node2 in node1_neighbors:
        net.configLinkStatus(node1,node2,'up')
    #sleep(2)
def myNet():
    global brokennode
    brokennode=sys.argv[1]
    print(brokennode)
    net = Mininet(topo=GeneratedTopo(), controller=lambda a: RemoteController(a,ip='127.0.0.1',port=6633),host=CPULimitedHost,link=TCLink)
    #net=Mininet(topo=GeneratedTopo(),host=CPULimitedHost,link=TCLink)
    #net.addController('c0', RemoteController, ip="127.0.0.1",port=6633)
    print("Hello")
    #net.start()
    print("DUmping host coonnections")
    #dumpNodeConnections(net.hosts)
    net.start()
    print("host is OKJ")
    #sleep(10)
    while 'is_connected' not in quietRun('ovs-vsctl show'):
        sleep(1)
        print('.')
    print("Test pingall")
    print(type(net.hosts))
    print(type(net.links))
    global neighbors
    neighbors={}
    global mac
    mac={}
    f_neighbors=open('neighbors.txt','w')
    f_mac=open('mac.txt','w')
    for item in net.hosts:
        list_host=[]
        host_mac={}
        print(type(item.name))
        print(item.name)
        neighbors[item.name]=list_host
        mac[item.name]=host_mac
    for item in net.switches:
        list_switch=[]
        switch_mac={}
        print(type(type(item.name)))
        print(item.name)
        neighbors[item.name]=list_switch
        mac[item.name]=switch_mac
    dic_temp={}
    mac_all={}
    for item in net.links:
        count1=item.intf1.name.find('-')
        count2=item.intf2.name.find('-')
        print(item.intf1.name[:count1])
        print(item.intf2.name[:count2])
        if item.intf1.name not in dic_temp:
            dic_temp[item.intf1.name]=1
        if item .intf2.name not in dic_temp:
            dic_temp[item.intf2.name]=1
        node1=item.intf1.name[:count1]
        node2=item.intf2.name[:count2]
        neighbors[node1].append(node2)
        neighbors[node2].append(node1)
        mac[node1][node2]=item.intf1.mac
        mac[node2][node1]=item.intf2.mac
        mac_all[item.intf1.name]=item.intf1.mac
        mac_all[item.intf2.name]=item.intf2.mac
        print(item.intf1.mac)
        print(item.intf2.mac)
        print(type(item.intf1.mac))
        print(type(item.intf2.mac))
    f_mac_all=open("mac_all.txt",'w')

    for item in mac_all:
        f_mac_all.write(item+'\t'+mac_all[item]+'\t'+'\n')

    for item in neighbors:
        print(item+'\t')
        for temp in neighbors[item]:
            print(temp+'\t')
            f_neighbors.write(item+'\t'+temp+'\n')
        print('\n')
    for item in mac:
        print(item+'\t')
        for temp in mac[item]:
            print(temp+'\t')
            print(mac[item][temp]+'\n')
            f_mac.write(item+'\t'+temp+'\t'+mac[item][temp]+'\n')
        print('\n')
    f_neighbors.close()
    f_mac.close()
    """
    h0=net.hosts[0]
    for item in net.hosts[1:]:
        h0.cmdPrint('ping -Q 0x64 -c 1 '+item.IP())
    """
    net.pingAll()
    #sys.exit(0)
    #pingtest(net,count_node)
    f_temp=open('tcplook.sh','w')
    for item in dic_temp:
        f_temp.write('sudo tcpdump -i '+item+' -w '+item+'.pcap'+' &'+'\n')
    f_temp.close()
    os.system('sh -x tcplook.sh')
    #sleep(2)
    samples=1

    
    for i in range(samples):
        print(i)
        #event=random.randint(0,2)
        event=0
        h0=net.hosts[0]
        h1=net.hosts[1]
        h2=net.hosts[2]
        #h0.cmdPrint('ping -Q 0x64 -c 1 '+h1.IP())
        #sleep(3)
        if(event==0):
            #normal(net,i)
            traffic(net,i)
        if(event==1):
            brokenlink(net,i)
        if(event==2):
            brokenswitch(net,i,brokennode)
        sleep(1)
    net.stop()
if __name__ == "__main__":
    print("GO")
    global count_node
    count_node=79
    myNet()
# topos = { 'generated': ( lambda: GeneratedTopo() ) }
